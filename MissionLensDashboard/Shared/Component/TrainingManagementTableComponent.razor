@using Microsoft.AspNetCore.Components
@using MissionLensDashboard.Data

<h5 class="mb-3">Training Management</h5>
<div class="card">
    <div class="card-body">
        <div class=" p-3 d-flex justify-content-start align-items-center gap-3">
            <button class="btn btn-primary rounded-pill px-2 bg-blue" @onclick="() => ShowDialog = true">
                <i class="oi oi-plus"></i>
            </button>
            <button class="btn btn-primary rounded-pill px-2 bg-blue">
                <i class="oi oi-chat"></i> Review Chats
            </button>
        </div>
        <hr />
        <div class="table-responsive text-sm">
            <table class="table table-hover align-middle document-table">
                <thead class="table-light">
                    <tr class="border-bottom border-b text-muted-foreground transition-colors">
                        <th scope="col">Question</th>
                        <th scope="col">Bot Answer</th>
                        <th scope="col">Answer</th>
                        <th scope="col">Embeddings Generated</th>
                        <th scope="col">Bot Type</th>
                        <th scope="col">User Response</th>
                        <th scope="col">User Notes</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var doc in PagedData)
                    {
                        <tr>
                            <td>@doc.Question</td>
                            <td>@doc.BotAnswer</td>
                            <td>@doc.Answer</td>
                            <td>
                                <span class="badge @GetCssClass(doc.EmbeddingsGenerated)">@doc.EmbeddingsGenerated</span>
                            </td>
                            <td>
                                <span class="badge @GetCssClass(doc.BotType)">@doc.BotType</span>
                            </td>
                            <td>
                                @doc.UserResponse
                            </td>
                            <td>
                                @doc.UserNotes
                            </td>
                            
                            <td>
                                <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => EditUser(doc)">
                                    <i class="oi oi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => DeleteUser(doc)">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <!-- Pagination -->
            <div class="pb-3 px-3 d-flex justify-content-end align-items-center">
                <button class="btn btn-sm btn-light" @onclick="PrevPage" disabled="@(_pageIndex == 0)">
                    «
                </button>
                <span class="text-xs text-gray-500 mx-4">Page @(_pageIndex + 1) of @TotalPages</span>
                <button class="btn btn-sm btn-light" @onclick="NextPage" disabled="@(_pageIndex + 1 >= TotalPages)">
                    »
                </button>
            </div>
        </div>
    </div>

</div>

<AddTrainingModelComponent @ref="addUserDialogRef" IsOpen="@ShowDialog" IsOpenChanged="@((value) => ShowDialog = value)" OnSave="SaveUser" />

<ConfirmDialogComponent @ref="confirmDialog" OnClose="HandleConfirmClose" />
<ToastComponent @ref="toastRef" />

@code {
    [Parameter] public List<TrainingManagementModel> Training { get; set; } = new();
    private AddTrainingModelComponent addUserDialogRef;
    private bool ShowDialog = false;

    private ConfirmDialogComponent? confirmDialog;
    private ToastComponent toastRef;

    private List<TrainingManagementModel> FilteredData = new();
    private IEnumerable<TrainingManagementModel> PagedData => FilteredData.Skip(_pageIndex * PageSize).Take(PageSize);

    // Pagination
    private int _pageIndex = 0;
    private int PageSize = 10;
    private int TotalPages => (int)Math.Ceiling((double)FilteredData.Count / PageSize);

    protected override void OnInitialized()
    {
        FilteredData = Training;
    }

    private void PrevPage() => _pageIndex = Math.Max(0, _pageIndex - 1);
    private void NextPage() => _pageIndex = Math.Min(TotalPages - 1, _pageIndex + 1);

   

    private void EditUser(TrainingManagementModel train)
    {
        // Open modal or navigate to edit page
        Console.WriteLine($"Edit user: {train.Question}");
    }

    private void DeleteUser(TrainingManagementModel train)
    {
        // Show confirm dialog then delete
        Console.WriteLine($"Delete user: {train.Question}");
    }

    private void SaveUser(TrainingManagementModel train)
    {
        Console.WriteLine($"Training model Added: {train.Question}, {train.BotAnswer}");
        // Save to DB or call API here
    }

    private async Task HandleConfirmClose(bool confirmed)
    {

    }

    private string GetCssClass(string status) => status switch
    {
        "Yes" => "bg-outline-success",
        "No" => "bg-outline-danger",
        "Published" => "bg-outline-success",
        "Bot AI" => "bg-outline-blue",
        _ => "bg-primary"
    };
}